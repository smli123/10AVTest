package com.sherman.smartlockex.ui.dev;

import java.util.ArrayList;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ListView;

import com.sherman.smartlockex.ui.common.SmartLockFragment;
import com.sherman.smartlockex.ui.smartlockex.SmartLockApplication;
import com.sherman.smartlockex.ui.util.MyAlertDialog;
import com.sherman.smartlockex.ui.util.RefreshableView;
import com.sherman.smartlockex.ui.util.RefreshableView.PullToRefreshListener;
import com.sherman.smartlockex.R;

public class DeviceFragment2 extends SmartLockFragment
		implements
			View.OnClickListener {
	private ListView mDevList = null;
	private RefreshableView mRefreshableView = null;
	private static DeviceFragment2 mFragment = null;

	public static DeviceFragment2 newInstance() {
		if (null == mFragment) {
			mFragment = new DeviceFragment2();
		}
		return mFragment;
	}

	public static void delete() {
		if (null != mFragment) {
			mFragment = null;
		}
	}

	private BroadcastReceiver mLoadPlugReveiver = new BroadcastReceiver() {

		@Override
		public void onReceive(Context context, Intent intent) {
		}
	};

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		mContext = getActivity();

//		IntentFilter filter = new IntentFilter();
//		filter.addAction(PubDefine.PLUG_POWER_ACTION);
//		filter.addAction(PubDefine.PLUG_UPDATE);
//		filter.addAction(PubDefine.PLUG_DELETE);
//		filter.addAction(PubDefine.PLUG_NOTIFY_POWER);
//		filter.addAction(PubDefine.PLUG_NOTIFY_ONLINE);
//		filter.addAction(PubDefine.PLUG_MODIFY_PLUGNAME);
//		filter.addAction(PubDefine.PLUG_NOTIFY_CURTAIN);
//		filter.addAction(PubDefine.PLUG_BACK2AP_ACTION);
//		mContext.registerReceiver(mLoadPlugReveiver, filter);

		new Handler().postDelayed(new Runnable() {
			@Override
			public void run() {
				qryPlugsFromServer();
			}
		}, 1);
	}

	private Handler mTimeoutHandler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			if (0 == msg.what) {
				timeoutHandler.removeCallbacks(timeoutProcess);
				if (null != mRefreshableView) {
					mRefreshableView.finishRefreshing();
				}
			}
		}
	};

	private void qryPlugsFromServer() {
		registerTimeoutHandler(mTimeoutHandler);
//
//		StringBuffer sb = new StringBuffer();
//		sb.append(SmartLockMessage.CMD_SP_QRYPLUG)
//				.append(StringUtils.PACKAGE_RET_SPLIT_SYMBOL)
//				.append(PubStatus.g_CurUserName);
//
//		sendMsg(true, sb.toString(), true);
	}

	private void setPlugsOffline() {
//		mPlugHelper.setAllPlugsOffline();
//		doBackgroundLoad();
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		super.onCreateView(inflater, container, savedInstanceState);
		mFragmentView = inflater.inflate(R.layout.fragment_dev, container,
				false);
		
		mDevList = (ListView) mFragmentView.findViewById(R.id.dev_list);

		mRefreshableView = (RefreshableView) mFragmentView
				.findViewById(R.id.refreshable_view);
		mRefreshableView.setOnRefreshListener(new PullToRefreshListener() {
			@Override
			public void onRefresh() {
				qryPlugsFromServer();
			}
		}, 0);

		return mFragmentView;
	}

	private Handler updateHandler = new Handler() {
		public void handleMessage(Message msg) {
			setPlugsOffline();
		};
	};

	@Override
	public void onResume() {
		super.onResume();
		SmartLockApplication.resetTask();
//		PubFunc.log("ControlFragment onResume");
//		doBackgroundLoad();
	}

	@Override
	public void onClick(View v) {
	}

	@Override
	public void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
		mContext.unregisterReceiver(mLoadPlugReveiver);
	}

	private Handler mPressHandler = new Handler() {
		public void handleMessage(Message msg) {
		};
	};

	View.OnClickListener modifyClick = new View.OnClickListener() {

		@Override
		public void onClick(View arg0) {
			// TODO Auto-generated method stub
			if (null == mModifyDlg) {
				return;
			}
			String text = mModifyDlg.getResult();
			if (!text.isEmpty()) {
				mNewPlugName = mModifyDlg.getResult();

				// 校验 NewPlugName：中英文占用的字节数必须小于20（最大20个byte）
				if (mNewPlugName.getBytes().length > 20) {
//					PubFunc.thinzdoToast(
//							mContext,
//							getString(R.string.smartplug_ctrl_mod_plugname_length_too_long));
					return;
				}

//				if (true == mPlugHelper.isPlugExists(PubStatus.g_CurUserName,
//						mNewPlugName)) {
//					PubFunc.thinzdoToast(mContext,
//							getString(R.string.smartplug_ctrl_samename_exist));
//					return;
//				}

//				mProgress = PubFunc.createProgressDialog(mContext,
//						getString(R.string.smartplug_ctrl_moding_name), false);
//				mProgress.show();
//
//				StringBuffer sb = new StringBuffer();
//				sb.append(SmartLockMessage.CMD_SP_MODYPLUG)
//						.append(StringUtils.PACKAGE_RET_SPLIT_SYMBOL)
//						.append(PubStatus.g_CurUserName)
//						.append(StringUtils.PACKAGE_RET_SPLIT_SYMBOL)
//						.append(mFocusPlugId)
//						.append(StringUtils.PACKAGE_RET_SPLIT_SYMBOL)
//						.append(mNewPlugName);
//				sendMsg(true, sb.toString(), true);
			}
		}
	};

	private void modifyName(String name) {
//		mModifyDlg = new MyAlertDialog(mContext);
//		mModifyDlg
//				.builder()
//				.setCancelable(true)
//				.setTitle(getString(R.string.smartplug_ctrl_mod_name))
//				.setEditText(name)
//				.setPositiveButton(mContext.getString(R.string.smartplug_ok),
//						modifyClick)
//				.setNegativeButton(
//						mContext.getString(R.string.smartplug_cancel),
//						new View.OnClickListener() {
//							@Override
//							public void onClick(View arg0) {
//
//							}
//
//						}).show();
	}

	private void deletePlug(String plugId) {
//		mErrorMsg = getString(R.string.smartplug_ctrl_delete_fail);
//		mProgress = PubFunc.createProgressDialog(mContext,
//				mContext.getString(R.string.smartplug_ctrl_delete), false);
//		mProgress.show();
//
//		if (mFocusPlugId.equalsIgnoreCase("0")) {
//			int a = 0;
//		}
//
//		StringBuffer sb = new StringBuffer();
//		sb.append(SmartLockMessage.CMD_SP_DELPLUG)
//				.append(StringUtils.PACKAGE_RET_SPLIT_SYMBOL)
//				.append(PubStatus.g_CurUserName)
//				.append(StringUtils.PACKAGE_RET_SPLIT_SYMBOL).append(plugId);
//		sendMsg(true, sb.toString(), true);
	}
}
